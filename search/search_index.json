{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python for Test Automation: A Complete Guide","text":"<p>This course provides a comprehensive introduction to Python programming and its applications in test automation. You\u2019ll start with Python basics\u2014covering variables, data structures, control flow, functions, and OOP\u2014before diving into test automation frameworks like Pytest, Selenium, API testing with Requests, database testing, and BDD with Behave.</p> <p>Whether you're a beginner or an experienced tester, this guide will equip you with the skills to automate testing efficiently using Python. \ud83d\ude80</p>"},{"location":"#course-topics","title":"\ud83d\udcd6 Course Topics","text":"<p>For a detailed breakdown of the course topics, check out the Course Overview.</p>"},{"location":"#chapter-1","title":"Chapter 1","text":"Main Topic Sub Topic Python Overview What is Python Key Features of Python Where is Python Used? Installing Python Installing and Setting Up the PyCharm IDE"},{"location":"course_overview/","title":"Course Overview","text":""},{"location":"course_overview/#python-programming-basics","title":"Python Programming Basics","text":"<ul> <li>Introduction to Python </li> <li>Overview of Python  </li> <li>Installing Python  </li> <li>Installing and Setting Up an IDE (PyCharm)  </li> <li>Running a \"Hello World\" Script  </li> <li> <p>Using the IDE (Debugging Basics)  </p> </li> <li> <p>Getting Started with Python </p> </li> <li>Variables and Data Types  </li> <li>Operators  </li> <li>Command-line Parameters  </li> <li> <p>Reading Input from Keyboard  </p> </li> <li> <p>Control Structures </p> </li> <li>Conditional Statements (if, elif, else)  </li> <li>Loops (for, while)  </li> <li>Range Function  </li> </ul>"},{"location":"course_overview/#python-data-structures","title":"Python Data Structures","text":"<ul> <li>Lists and List Operations  </li> <li>Tuples and Tuple Operations  </li> <li>Dictionaries and Dictionary Operations  </li> <li>Sets  </li> </ul>"},{"location":"course_overview/#working-with-files","title":"Working with Files","text":"<ul> <li>Reading and Writing Text Files  </li> </ul>"},{"location":"course_overview/#functions-in-python","title":"Functions in Python","text":"<ul> <li>Function Syntax  </li> <li>Parameters and Return Values  </li> <li>Different Types of Parameters (args, kwargs)  </li> </ul>"},{"location":"course_overview/#error-handling","title":"Error Handling","text":"<ul> <li>Exception Handling in Python  </li> </ul>"},{"location":"course_overview/#modules-and-packages","title":"Modules and Packages","text":"<ul> <li>Importing and Creating Modules  </li> <li>Using Packages  </li> </ul>"},{"location":"course_overview/#object-oriented-programming-oop-in-python","title":"Object-Oriented Programming (OOP) in Python","text":"<ul> <li>Classes and Objects  </li> <li>Inheritance and Polymorphism  </li> <li>Encapsulation and Abstraction  </li> </ul>"},{"location":"course_overview/#test-automation-with-python","title":"\ud83d\udee0\ufe0f Test Automation with Python","text":""},{"location":"course_overview/#introduction-to-pytest","title":"Introduction to Pytest","text":"<ul> <li>Overview of Pytest  </li> <li>Writing and Running Tests  </li> </ul>"},{"location":"course_overview/#web-test-automation-with-python","title":"Web Test Automation with Python","text":"<ul> <li>Using Selenium for Browser Automation  </li> </ul>"},{"location":"course_overview/#api-test-automation-with-python","title":"API Test Automation with Python","text":"<ul> <li>Testing REST APIs with Requests and Pytest  </li> </ul>"},{"location":"course_overview/#database-testing-with-python","title":"Database Testing with Python","text":"<ul> <li>Connecting to Databases and Running Queries  </li> </ul>"},{"location":"course_overview/#behavior-driven-development-bdd-with-python","title":"Behavior-Driven Development (BDD) with Python","text":"<ul> <li>Using Behave for BDD Testing  </li> </ul>"},{"location":"installing-and-setting-up-the-pycharm-ide/","title":"Installing and Setting Up the PyCharm IDE","text":"<p>For this series, we will be using PyCharm as our IDE. Follow these steps to install and configure it:</p> <ol> <li>Download the latest Community Edition of PyCharm from the official website:</li> <li>https://www.jetbrains.com/pycharm/download/?section=windows</li> <li>Once the download is complete, double-click the .msi (Windows) or appropriate installer file.</li> <li>Follow the on-screen instructions to complete the installation.</li> <li> <p>After installation, open PyCharm and set up the Python interpreter:</p> <ol> <li>Go to File \u2192 Settings \u2192 Project \u2192 Interpreter.</li> <li>Add the path to the installed Python executable.</li> </ol> <p> </p> </li> <li> <p>Your PyCharm setup is now complete, and you're ready to start coding!</p> </li> </ol>"},{"location":"installing-python/","title":"Installing Python","text":""},{"location":"installing-python/#to-install-python-follow-these-steps","title":"To install Python, follow these steps:","text":"<ol> <li>Visit the official Python website: https://www.python.org/.</li> <li>Download the appropriate version based on your operating system and machine type (32-bit or 64-bit).</li> <li> <p>For Windows users:</p> <ol> <li>Double-click the downloaded .msi or .exe file.</li> <li>Follow the installation instructions until the process is complete.</li> <li>Once installed, update the system PATH environment variable:<ol> <li>Add the directory where Python is installed.</li> <li>Also, add the Scripts folder path (usually located inside the Python installation directory).</li> </ol> </li> </ol> </li> <li> <p>To verify the installation, open Command Prompt and run:     <code>python --version</code></p> </li> </ol>"},{"location":"key-features-of-python/","title":"Key Features of Python","text":""},{"location":"key-features-of-python/#simple-and-readable-syntax","title":"Simple and Readable Syntax","text":"<ul> <li>Python\u2019s syntax is designed to be easy to read and write.</li> <li>It resembles natural English, making it beginner-friendly.</li> </ul> <p>Example:</p> <pre><code>    name = \"Alice\"\n    print(f\"Hello, {name}!\")\n</code></pre>"},{"location":"key-features-of-python/#interpreted-language","title":"Interpreted Language","text":"<ul> <li>Python does not require compilation like C or Java.</li> <li>The Python interpreter executes code line by line.</li> <li>This makes debugging easier but may be slower than compiled languages.</li> </ul>"},{"location":"key-features-of-python/#dynamically-typed","title":"Dynamically Typed","text":"<ul> <li>You don\u2019t need to specify variable types (e.g., int, string).</li> <li>Python automatically assigns data types based on the assigned value.</li> </ul> <p>Example:</p> <pre><code>    x = 10 # Integer\n    y = \"Hello\" # String\n    z = 3.14 # Float\n</code></pre>"},{"location":"key-features-of-python/#cross-platform-compatibility","title":"Cross-Platform Compatibility","text":"<ul> <li>Python runs on Windows, macOS, Linux, and even embedded systems.</li> <li>Write code once and run it anywhere without modifications.</li> </ul>"},{"location":"key-features-of-python/#object-oriented-and-functional-programming","title":"Object-Oriented and Functional Programming","text":"<ul> <li>Supports OOP (Object-Oriented Programming) with classes and objects.</li> <li>Also supports functional programming using lambda functions and higher-order functions.</li> </ul>"},{"location":"key-features-of-python/#extensive-standard-library","title":"Extensive Standard Library","text":"<ul> <li>Python comes with a rich set of built-in libraries for:     \u2705 File handling (os, shutil)     \u2705 Math operations (math, random)     \u2705 Web development (Flask, Django)     \u2705 Data science (pandas, numpy, matplotlib)     \u2705 Machine learning (scikit-learn, tensorflow)</li> </ul>"},{"location":"key-features-of-python/#open-source-and-community-support","title":"Open Source and Community Support","text":"<ul> <li>Python is free and open-source.</li> <li>Has one of the largest programming communities, making it easy to find help.</li> </ul>"},{"location":"key-features-of-python/#supports-multi-paradigm-programming","title":"Supports Multi-Paradigm Programming","text":"<ul> <li>Python allows procedural, object-oriented, and functional programming styles.</li> <li>This flexibility makes it suitable for various types of applications.</li> </ul>"},{"location":"key-features-of-python/#automatic-memory-management","title":"Automatic Memory Management","text":"<ul> <li>Python handles memory allocation and garbage collection automatically.</li> <li>No need to manually manage memory, unlike in C or C++.</li> </ul>"},{"location":"key-features-of-python/#gui-programming-support","title":"GUI Programming Support","text":"<ul> <li>Python supports Graphical User Interfaces (GUIs) with libraries like:     \u2705 Tkinter (built-in GUI framework)     \u2705 PyQt (for advanced GUI applications)     \u2705 Kivy (for cross-platform mobile apps)</li> </ul>"},{"location":"python_overview/","title":"What is Python","text":"Python Overview"},{"location":"python_overview/#what-is-python","title":"What is Python?","text":"<p>Python is a high-level, interpreted programming language known for its simplicity, readability, and versatility. It is widely used for web development, data science, automation, AI, and more.</p>"},{"location":"python_overview/#what-is-a-high-level-language","title":"What is a High-Level Language?","text":"<ul> <li>A high-level language is a programming language that is closer to human language than to machine code.</li> <li>It allows developers to write code without worrying about hardware details like memory management.</li> <li>Examples of high-level languages: Python, Java, JavaScript, C#, Ruby.</li> <li>Python\u2019s syntax is simple and resembles English, making it easy to learn and use.</li> </ul>"},{"location":"python_overview/#python-is-an-interpreted-language-what-does-that-mean","title":"Python is an Interpreted Language \u2013 What Does That Mean?","text":"<ul> <li>Python code is executed line by line at runtime, rather than being compiled into machine code before execution.</li> <li>This makes it easier to debug but can be slower than compiled languages like C or Java.</li> <li>The Python interpreter processes the code directly, allowing for rapid development and testing.</li> <li>You don\u2019t need to compile Python programs; just run them with</li> </ul>"},{"location":"python_overview/#python-uses-indentation-why-is-this-important","title":"Python Uses Indentation \u2013 Why is This Important?","text":"<ul> <li>Python enforces indentation (whitespace at the beginning of a line) to define code blocks instead of using {} like in C or Java.</li> <li>This makes Python code more readable and clean.</li> <li>If indentation is incorrect, Python will throw an IndentationError.</li> </ul>"},{"location":"where-is-python-used/","title":"Where is Python Used?","text":"<p>\ud83d\ude80 Web Development \u2013 Django, Flask \ud83e\udd16 AI &amp; Machine Learning \u2013 TensorFlow, PyTorch \ud83d\udcca Data Science \u2013 Pandas, NumPy, Matplotlib \ud83d\udd0e Automation &amp; Scripting \u2013 Selenium, Request , Database \ud83d\udcf1 Mobile Apps \u2013 Kivy, BeeWare \ud83c\udfae Game Development \u2013 Pygame \ud83d\udd17 Networking &amp; Cybersecurity \u2013 Scapy</p>"}]}